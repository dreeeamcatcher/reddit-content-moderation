services:
  postgres:
    image: postgres:15
    container_name: reddit_moderation_db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    env_file:
      - .env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  mlflow:
    build: 
      context: .
      dockerfile: docker/mlflow/Dockerfile
    container_name: mlflow_tracking_server
    ports:
      - "5001:5000" 
    command: >
      mlflow server
      --host 0.0.0.0
      --port 5000
      --backend-store-uri postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
    env_file:
      - .env
    volumes:
      - ./mlartifacts:/mlartifacts
      - ./data/initial-model:/data/initial-model
    depends_on:
      postgres:
        condition: service_healthy
    restart: always

  app:
    build:
      dockerfile: docker/app/Dockerfile 
    container_name: reddit_moderation_app
    develop:
      watch:
        - action: sync
          path: ./app
          target: /app/app
    ports:
      - "8000:8000"
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      mlflow:
        condition: service_started
    restart: always

  retrainer:
    build:
      dockerfile: docker/retrainer/Dockerfile
    container_name: reddit_moderation_retrainer
    develop:
      watch:
        - action: sync
          path: ./retrainer_app
          target: /retrainer_app/retrainer_app
    ports:
      - "8001:8000"
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      mlflow:
        condition: service_started
    restart: always

  airflow:
    build:
      context: .
      dockerfile: docker/airflow/Dockerfile
    container_name: airflow
    command: standalone
    ports:
      - "8080:8080"
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
    restart: always

volumes:
  postgres_data:
  